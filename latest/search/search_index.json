{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome \u00b6 This package is under development. Getting help \u00b6 Citing spellmatch \u00b6","title":"Welcome"},{"location":"#welcome","text":"This package is under development.","title":"Welcome"},{"location":"#getting-help","text":"","title":"Getting help"},{"location":"#citing-spellmatch","text":"","title":"Citing spellmatch"},{"location":"changelog/","text":"Changelog \u00b6 All notable changes to this project will be documented in this file. The format is based on Keep a Changelog , and this project adheres to Semantic Versioning . 0.1.0 - 2022-02-20 \u00b6 Initial release","title":"Changelog"},{"location":"changelog/#changelog","text":"All notable changes to this project will be documented in this file. The format is based on Keep a Changelog , and this project adheres to Semantic Versioning .","title":"Changelog"},{"location":"changelog/#010-2022-02-20","text":"Initial release","title":"0.1.0 - 2022-02-20 "},{"location":"contributing/","text":"Contributing \u00b6 Pull requests are welcome. For major changes, please open an issue first to discuss what you would like to change. Please make sure to update tests as appropriate.","title":"Contributing"},{"location":"contributing/#contributing","text":"Pull requests are welcome. For major changes, please open an issue first to discuss what you would like to change. Please make sure to update tests as appropriate.","title":"Contributing"},{"location":"installation/","text":"Installation \u00b6 Spellmatch is implemented in Python and shipped as a Python package. Requirements \u00b6 The spellmatch Python package requires Python 3.9. A user interface for Jupyter notebooks, e.g. JupyterLab (optional, for opening notebooks). Using virtual environments (e.g. conda ) is strongly recommended for reproducibility reasons. Hardware resources Several spatial cell matching algorithms implemented in spellmatch require extensive hardware resources, depending on image sizes, hyper-parameters etc. A system with at least 64GB of RAM is recommended. Installation \u00b6 You can install spellmatch from PyPI using pip : pip install spellmatch Alternatively, you can install spellmatch from conda-forge using conda : conda install -c conda-forge spellmatch Usage \u00b6 Spellmatch can be used from the command-line (terminal in Linux/MacOS, console in Windows): > spellmatch --help Usage: spellmatch [OPTIONS] COMMAND [ARGS]... Options: --version Show the version and exit. --help Show this message and exit. Commands: ... Refer to Usage for detailed instructions on how to use spellmatch .","title":"Installation"},{"location":"installation/#installation","text":"Spellmatch is implemented in Python and shipped as a Python package.","title":"Installation"},{"location":"installation/#requirements","text":"The spellmatch Python package requires Python 3.9. A user interface for Jupyter notebooks, e.g. JupyterLab (optional, for opening notebooks). Using virtual environments (e.g. conda ) is strongly recommended for reproducibility reasons. Hardware resources Several spatial cell matching algorithms implemented in spellmatch require extensive hardware resources, depending on image sizes, hyper-parameters etc. A system with at least 64GB of RAM is recommended.","title":"Requirements"},{"location":"installation/#installation_1","text":"You can install spellmatch from PyPI using pip : pip install spellmatch Alternatively, you can install spellmatch from conda-forge using conda : conda install -c conda-forge spellmatch","title":"Installation"},{"location":"installation/#usage","text":"Spellmatch can be used from the command-line (terminal in Linux/MacOS, console in Windows): > spellmatch --help Usage: spellmatch [OPTIONS] COMMAND [ARGS]... Options: --version Show the version and exit. --help Show this message and exit. Commands: ... Refer to Usage for detailed instructions on how to use spellmatch .","title":"Usage"},{"location":"license/","text":"License \u00b6 Copyright (c) 2022 University of Zurich Spellmatch is licensed under the MIT License. https://github.com/BodenmillerGroup/spellmatch/blob/main/LICENSE","title":"License"},{"location":"license/#license","text":"Copyright (c) 2022 University of Zurich Spellmatch is licensed under the MIT License. https://github.com/BodenmillerGroup/spellmatch/blob/main/LICENSE","title":"License"},{"location":"algorithms/","text":"Algorithms \u00b6","title":"Algorithms"},{"location":"algorithms/#algorithms","text":"","title":"Algorithms"},{"location":"benchmark/","text":"Benchmark \u00b6","title":"Benchmark"},{"location":"benchmark/#benchmark","text":"","title":"Benchmark"},{"location":"reference/","text":"Reference \u00b6","title":"Reference"},{"location":"reference/#reference","text":"","title":"Reference"},{"location":"usage/","text":"Introduction \u00b6 Workflow \u00b6 The following flowchart illustrates the spellmatch workflow. Blue rectangles indicate steps , yellow boxes represent modules . Cylinders indicate input and output data of the workflow. flowchart TB source_data[(\"Source data<br>(mask, image, panel)\")] --> interactive_matching target_data[(\"Target data<br>(mask, image, panel)\")] --> interactive_matching subgraph registration interactive_matching[Interactive cell matching] transform_initialization[Geometric transform initialization] image_registration[Automatic image registration] interactive_matching -->|\"initial cell pairs (n>=3)\"| transform_initialization transform_initialization --> image_registration end transform_initialization -->|initial transform| automatic_matching image_registration -->|refined transform| automatic_matching subgraph matching automatic_matching[Automatic cell matching] transform_update[\"Geometric transform update<br>(iterative algorithms only)\"] score_thresholding[Assignment score thresholding] automatic_matching -->|assignment scores| transform_update transform_update -->|updated transform| automatic_matching automatic_matching -->|assignment scores| score_thresholding end score_thresholding --> cell_pairs[(\"Cell assignment<br>(final cell pairs)\")] transform_update --> transform[(Geometric transform)] Input data \u00b6 Spellmatch requires pairs of source data and target data, where source/target data consist of: 2D cell masks (TIFF files of any data type) 2D single- or multichannel images (TIFF files of any data type, optional) For multi-channel images: panel with channel information (CSV files, in channel order) Column headers: name (channel name, unique), keep ( 0 or 1 , optional) Images and corresponding masks have to match in size. For multi-channel images, the number of rows in the panel (exluding column headers) has to match the number of image channels. Images and masks are matched by filename (alphabetical order). Source and target data are matched by filename (alphabetical order). Source and target images/masks do not have to have the same size, scale (pixel size), or number of channels. Source panel and target panel can share channels, but do not have to. Tasks \u00b6 For convenience, multiple steps are combined into tasks . For each task, spellmatch provides a dedicated command . The individual tasks and commands are described on the following pages. Mask alignment Interactive cell matching Geometric transform initialization Image registration (optional) Automatic image registration Spatial cell matching Automatic cell matching Geometric transform update Cell assignment Assignment score thresholding","title":"Introduction"},{"location":"usage/#introduction","text":"","title":"Introduction"},{"location":"usage/#workflow","text":"The following flowchart illustrates the spellmatch workflow. Blue rectangles indicate steps , yellow boxes represent modules . Cylinders indicate input and output data of the workflow. flowchart TB source_data[(\"Source data<br>(mask, image, panel)\")] --> interactive_matching target_data[(\"Target data<br>(mask, image, panel)\")] --> interactive_matching subgraph registration interactive_matching[Interactive cell matching] transform_initialization[Geometric transform initialization] image_registration[Automatic image registration] interactive_matching -->|\"initial cell pairs (n>=3)\"| transform_initialization transform_initialization --> image_registration end transform_initialization -->|initial transform| automatic_matching image_registration -->|refined transform| automatic_matching subgraph matching automatic_matching[Automatic cell matching] transform_update[\"Geometric transform update<br>(iterative algorithms only)\"] score_thresholding[Assignment score thresholding] automatic_matching -->|assignment scores| transform_update transform_update -->|updated transform| automatic_matching automatic_matching -->|assignment scores| score_thresholding end score_thresholding --> cell_pairs[(\"Cell assignment<br>(final cell pairs)\")] transform_update --> transform[(Geometric transform)]","title":"Workflow"},{"location":"usage/#input-data","text":"Spellmatch requires pairs of source data and target data, where source/target data consist of: 2D cell masks (TIFF files of any data type) 2D single- or multichannel images (TIFF files of any data type, optional) For multi-channel images: panel with channel information (CSV files, in channel order) Column headers: name (channel name, unique), keep ( 0 or 1 , optional) Images and corresponding masks have to match in size. For multi-channel images, the number of rows in the panel (exluding column headers) has to match the number of image channels. Images and masks are matched by filename (alphabetical order). Source and target data are matched by filename (alphabetical order). Source and target images/masks do not have to have the same size, scale (pixel size), or number of channels. Source panel and target panel can share channels, but do not have to.","title":"Input data"},{"location":"usage/#tasks","text":"For convenience, multiple steps are combined into tasks . For each task, spellmatch provides a dedicated command . The individual tasks and commands are described on the following pages. Mask alignment Interactive cell matching Geometric transform initialization Image registration (optional) Automatic image registration Spatial cell matching Automatic cell matching Geometric transform update Cell assignment Assignment score thresholding","title":"Tasks"},{"location":"usage/cell_assignment/","text":"Cell assignment \u00b6 spellmatch assign","title":"Cell assignment"},{"location":"usage/cell_assignment/#cell-assignment","text":"spellmatch assign","title":"Cell assignment"},{"location":"usage/image_registration/","text":"Image registration \u00b6 spellmatch register","title":"Image registration"},{"location":"usage/image_registration/#image-registration","text":"spellmatch register","title":"Image registration"},{"location":"usage/mask_alignment/","text":"Mask alignment \u00b6 spellmatch align","title":"Mask alignment"},{"location":"usage/mask_alignment/#mask-alignment","text":"spellmatch align","title":"Mask alignment"},{"location":"usage/spatial_cell_matching/","text":"Spatial cell matching \u00b6 spellmatch match","title":"Spatial cell matching"},{"location":"usage/spatial_cell_matching/#spatial-cell-matching","text":"spellmatch match","title":"Spatial cell matching"}]}